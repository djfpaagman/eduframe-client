=begin
#Eduframe - API (params in:body)

# <p>The Eduframe API is organized around REST and is formatted in JSON. We try to keep the amount of changes to the API to a minimum but it is possible that it is changed.</p> <dl class=\"rdoc-list label-list\"><dt>Swagger / Open API <dd> <p>In addition to this documentation, it is also possible to view this documentation through the <a href=\"http://petstore.swagger.io/?url=https%3A%2F%2Fapi.eduframe.nl%2Fapi%2Fv1%2Fdocs.json%3Ftype%3Dswagger\">swagger (Open API) viewer</a>.</p> </dd><dt>Authentication <dd> <p>For authenticating through Eduframe API v1 we use OAuth2 token. There are several open endpoints which can be used without authentication. For the endpoints that need authentication, the user needs an API key to send together with the request as <code>Bearer &lt;api key&gt;</code> in the authorization header. If there are requests that require authentication a <code>403 Forbidden</code> error or a <code>404 Not Found</code> error will be returned.</p> </dd><dt>Sorting <dd> <p>For sorting the data, the following format of base_url is used (e.g.): <code>api/v1/planned_courses?sort=start_date</code> for ascending sort (default sorting) and <code>api/v1/planned_courses?sort=start_date:desc</code> for descending sort.</p> </dd><dt>Include relations <dd> <p>For adding an include, the following format of base_url is used (e.g.): <code>api/v1/planned_courses?include=course.credit_definitions.type</code>. The allowed includes are shown at the relevant actions.</p> </dd><dt>Filtering <dd> <p>For adding a filter, the following format of base_url is used (e.g.): <code>api/v1/planned_courses?include=course&amp;min_cost=200</code>. The allowed filters are shown at the relevant actions.</p> </dd><dt>Blank fields <dd> <p>Blank fields are included as <code>null</code>.</p> </dd><dt>Boolean values <dd> <p>All boolean parameters can be passed as <code>true</code>, <code>false</code>, <code>1</code> or <code>0</code>. And are returned as <code>true</code> or <code>false</code>.</p> </dd><dt>CORS <dd> <p>The Eduframe API supports Cross Origin Resource Sharing (CORS) based on a list of trusted domains. Ask support if you need a domain to be added to the list of your educator.</p> </dd><dt>Date Format <dd> <p>Some requests generate timestamps (a timestamp is generated at the moment the API call is made) or allow specifying them. All timestamps are returned in <code>ISO 8601</code> format: <code>yyyy-MM-ddTHH:mm:ss.SSSZ</code>. If providing a date, just make sure you follow the same ISO standard.</p> </dd><dt>HTTP verbs <dd> <p>For each request the appropriate HTTP verbs are used. <code>GET</code> is used for retrieving resources, <code>POST</code> is used for creating resources, <code>PUT</code> is used for updated resources with partial JSON data. A PUT request can accept one or more parameters to update the resource; the parameters that are not updated keep their original values, <code>DELETE</code> is used for deleting resources.</p> </dd><dt>Pagination <dd> <p>Requests that return multiple items will be paginated to 25 items by defaut. You can select a page with the <code>page</code> query parameter. When omitted, the first page is returned by default. You can set a custom per-page amount with the <code>per_page</code> query parameter (with a maximum of 100). The <a href=\"http://tools.ietf.org/html/rfc5988\">Link header</a> includes pagination information. For example: <code>Link: &lt;https://educator.eduframe.nl/courses?page=3&per_page=100&gt;; rel=&quot;next&quot;, &lt;https://educator.eduframe.nl/courses?page=50&per_page=100&gt;; rel=&quot;last&quot;</code></p> </dd><dt>Errors <dd> <p>In the Eduframe API the general codes are: the <code>2xx</code> range indicates a successful request; the <code>4xx</code> range indicates an error representing the failure of giving the provided information(e.g. a required parameter was omitted, a certain include/filter is not allowed, unauthorized access, etc.); the <code>5xx</code> range indicates an error with the Eduframe&#39;s servers.</p> </dd><dt>WebHooks <dd> <p>Webhooks allow you to build or set up integrations, such as Azure Logic Apps, which subscribe to certain events on Eduframe. When one of those events is triggered, we will send a HTTP POST payload to the webhook&#39;s configured URL. <a href=\"/api/v1/docs/1.0/webhooks.html\">More info can be found at the webhooks documentation.</a></p> </dd></dl> 

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.21

=end

require 'uri'

module Eduframe
  class PlannedCoursesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get all planned course records of a single course
    # 
    # @param course_id Filter results on course_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include Include relations
    # @option opts [String] :search Filter results on search
    # @option opts [String] :closed_for_account_id Filter results on closed_for_account_id
    # @option opts [String] :min_cost Filter results on min_cost
    # @option opts [String] :max_cost Filter results on max_cost
    # @option opts [String] :type Filter results on type
    # @option opts [String] :publicly_available Filter results on publicly_available
    # @option opts [String] :parents_published Filter results on parents_published
    # @option opts [String] :published_public Filter results on published_public
    # @option opts [String] :visible_for_user_id Filter results on visible_for_user_id
    # @option opts [String] :start_date Filter results on start_date
    # @option opts [String] :start_date_in_month Filter results on start_date_in_month
    # @option opts [String] :start_date_from Filter results on start_date_from
    # @option opts [String] :start_date_until Filter results on start_date_until
    # @option opts [String] :availability_state Filter results on availability_state
    # @option opts [Array<String>] :id Filter results on id
    # @option opts [Array<String>] :not_id Filter results on not_id
    # @option opts [Array<String>] :status Filter results on status
    # @option opts [Array<String>] :course_label_ids Filter results on course_label_ids
    # @option opts [Array<String>] :course_variant_id Filter results on course_variant_id
    # @option opts [Array<String>] :course_location_id Filter results on course_location_id
    # @option opts [Array<String>] :course_category_id Filter results on course_category_id
    # @option opts [Array<String>] :course_credit_category_id Filter results on course_credit_category_id
    # @option opts [Array<String>] :teacher_ids Filter results on teacher_ids
    # @option opts [Array<String>] :enrollments_status Filter results on enrollments_status
    # @option opts [Array<String>] :attendee_ids Filter results on attendee_ids
    # @option opts [Array<String>] :sort Sort the results. Can change order by using &#x60;&lt;sort_by&gt;:&lt;direction&gt;&#x60; where &#x60;&lt;direction&gt;&#x60; is either &#x60;asc&#x60; or &#x60;desc&#x60;
    # @return [Array<PlannedCourse>]
    def get_courses_course_id_planned_courses(course_id, opts = {})
      data, _status_code, _headers = get_courses_course_id_planned_courses_with_http_info(course_id, opts)
      data
    end

    # Get all planned course records of a single course
    # 
    # @param course_id Filter results on course_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include Include relations
    # @option opts [String] :search Filter results on search
    # @option opts [String] :closed_for_account_id Filter results on closed_for_account_id
    # @option opts [String] :min_cost Filter results on min_cost
    # @option opts [String] :max_cost Filter results on max_cost
    # @option opts [String] :type Filter results on type
    # @option opts [String] :publicly_available Filter results on publicly_available
    # @option opts [String] :parents_published Filter results on parents_published
    # @option opts [String] :published_public Filter results on published_public
    # @option opts [String] :visible_for_user_id Filter results on visible_for_user_id
    # @option opts [String] :start_date Filter results on start_date
    # @option opts [String] :start_date_in_month Filter results on start_date_in_month
    # @option opts [String] :start_date_from Filter results on start_date_from
    # @option opts [String] :start_date_until Filter results on start_date_until
    # @option opts [String] :availability_state Filter results on availability_state
    # @option opts [Array<String>] :id Filter results on id
    # @option opts [Array<String>] :not_id Filter results on not_id
    # @option opts [Array<String>] :status Filter results on status
    # @option opts [Array<String>] :course_label_ids Filter results on course_label_ids
    # @option opts [Array<String>] :course_variant_id Filter results on course_variant_id
    # @option opts [Array<String>] :course_location_id Filter results on course_location_id
    # @option opts [Array<String>] :course_category_id Filter results on course_category_id
    # @option opts [Array<String>] :course_credit_category_id Filter results on course_credit_category_id
    # @option opts [Array<String>] :teacher_ids Filter results on teacher_ids
    # @option opts [Array<String>] :enrollments_status Filter results on enrollments_status
    # @option opts [Array<String>] :attendee_ids Filter results on attendee_ids
    # @option opts [Array<String>] :sort Sort the results. Can change order by using &#x60;&lt;sort_by&gt;:&lt;direction&gt;&#x60; where &#x60;&lt;direction&gt;&#x60; is either &#x60;asc&#x60; or &#x60;desc&#x60;
    # @return [Array<(Array<PlannedCourse>, Fixnum, Hash)>] Array<PlannedCourse> data, response status code and response headers
    def get_courses_course_id_planned_courses_with_http_info(course_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlannedCoursesApi.get_courses_course_id_planned_courses ...'
      end
      # verify the required parameter 'course_id' is set
      if @api_client.config.client_side_validation && course_id.nil?
        fail ArgumentError, "Missing the required parameter 'course_id' when calling PlannedCoursesApi.get_courses_course_id_planned_courses"
      end
      if @api_client.config.client_side_validation && opts[:'include'] && !opts[:'include'].all? { |item| ['teachers', 'course_variant', 'catalog_variant', 'meetings.meeting_location', 'meetings', 'course_location.address', 'course_location', 'course.category', 'course.course_tab_contents.course_tab', 'course.course_tab_contents', 'course.credit_definitions.type.category', 'course.credit_definitions.type', 'course.credit_definitions', 'course'].include?(item) }
        fail ArgumentError, 'invalid value for "include", must include one of teachers, course_variant, catalog_variant, meetings.meeting_location, meetings, course_location.address, course_location, course.category, course.course_tab_contents.course_tab, course.course_tab_contents, course.credit_definitions.type.category, course.credit_definitions.type, course.credit_definitions, course'
      end
      if @api_client.config.client_side_validation && opts[:'sort'] && !opts[:'sort'].all? { |item| ['start_date', 'confirmed_active_and_completed_enrollments_count', 'requested_enrollments_count', 'courses.name', 'courses', 'course_locations.name', 'course_locations', 'course_variants.name', 'course_variants'].include?(item) }
        fail ArgumentError, 'invalid value for "sort", must include one of start_date, confirmed_active_and_completed_enrollments_count, requested_enrollments_count, courses.name, courses, course_locations.name, course_locations, course_variants.name, course_variants'
      end
      # resource path
      local_var_path = '/courses/{course_id}/planned_courses'.sub('{' + 'course_id' + '}', course_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = @api_client.build_collection_param(opts[:'include'], :csv) if !opts[:'include'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'closed_for_account_id'] = opts[:'closed_for_account_id'] if !opts[:'closed_for_account_id'].nil?
      query_params[:'min_cost'] = opts[:'min_cost'] if !opts[:'min_cost'].nil?
      query_params[:'max_cost'] = opts[:'max_cost'] if !opts[:'max_cost'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'publicly_available'] = opts[:'publicly_available'] if !opts[:'publicly_available'].nil?
      query_params[:'parents_published'] = opts[:'parents_published'] if !opts[:'parents_published'].nil?
      query_params[:'published_public'] = opts[:'published_public'] if !opts[:'published_public'].nil?
      query_params[:'visible_for_user_id'] = opts[:'visible_for_user_id'] if !opts[:'visible_for_user_id'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'start_date_in_month'] = opts[:'start_date_in_month'] if !opts[:'start_date_in_month'].nil?
      query_params[:'start_date_from'] = opts[:'start_date_from'] if !opts[:'start_date_from'].nil?
      query_params[:'start_date_until'] = opts[:'start_date_until'] if !opts[:'start_date_until'].nil?
      query_params[:'availability_state'] = opts[:'availability_state'] if !opts[:'availability_state'].nil?
      query_params[:'id'] = @api_client.build_collection_param(opts[:'id'], :csv) if !opts[:'id'].nil?
      query_params[:'not_id'] = @api_client.build_collection_param(opts[:'not_id'], :csv) if !opts[:'not_id'].nil?
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :csv) if !opts[:'status'].nil?
      query_params[:'course_label_ids'] = @api_client.build_collection_param(opts[:'course_label_ids'], :csv) if !opts[:'course_label_ids'].nil?
      query_params[:'course_variant_id'] = @api_client.build_collection_param(opts[:'course_variant_id'], :csv) if !opts[:'course_variant_id'].nil?
      query_params[:'course_location_id'] = @api_client.build_collection_param(opts[:'course_location_id'], :csv) if !opts[:'course_location_id'].nil?
      query_params[:'course_category_id'] = @api_client.build_collection_param(opts[:'course_category_id'], :csv) if !opts[:'course_category_id'].nil?
      query_params[:'course_credit_category_id'] = @api_client.build_collection_param(opts[:'course_credit_category_id'], :csv) if !opts[:'course_credit_category_id'].nil?
      query_params[:'teacher_ids'] = @api_client.build_collection_param(opts[:'teacher_ids'], :csv) if !opts[:'teacher_ids'].nil?
      query_params[:'enrollments_status'] = @api_client.build_collection_param(opts[:'enrollments_status'], :csv) if !opts[:'enrollments_status'].nil?
      query_params[:'attendee_ids'] = @api_client.build_collection_param(opts[:'attendee_ids'], :csv) if !opts[:'attendee_ids'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer', 'Educator']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PlannedCourse>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlannedCoursesApi#get_courses_course_id_planned_courses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a planned course record of a single course
    # 
    # @param id 
    # @param course_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include Include relations
    # @return [PlannedCourse]
    def get_courses_course_id_planned_courses_id(id, course_id, opts = {})
      data, _status_code, _headers = get_courses_course_id_planned_courses_id_with_http_info(id, course_id, opts)
      data
    end

    # Get a planned course record of a single course
    # 
    # @param id 
    # @param course_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include Include relations
    # @return [Array<(PlannedCourse, Fixnum, Hash)>] PlannedCourse data, response status code and response headers
    def get_courses_course_id_planned_courses_id_with_http_info(id, course_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlannedCoursesApi.get_courses_course_id_planned_courses_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PlannedCoursesApi.get_courses_course_id_planned_courses_id"
      end
      # verify the required parameter 'course_id' is set
      if @api_client.config.client_side_validation && course_id.nil?
        fail ArgumentError, "Missing the required parameter 'course_id' when calling PlannedCoursesApi.get_courses_course_id_planned_courses_id"
      end
      if @api_client.config.client_side_validation && opts[:'include'] && !opts[:'include'].all? { |item| ['teachers', 'course_variant', 'catalog_variant', 'meetings.meeting_location', 'meetings', 'course_location.address', 'course_location', 'course.category', 'course.course_tab_contents.course_tab', 'course.course_tab_contents', 'course.credit_definitions.type.category', 'course.credit_definitions.type', 'course.credit_definitions', 'course'].include?(item) }
        fail ArgumentError, 'invalid value for "include", must include one of teachers, course_variant, catalog_variant, meetings.meeting_location, meetings, course_location.address, course_location, course.category, course.course_tab_contents.course_tab, course.course_tab_contents, course.credit_definitions.type.category, course.credit_definitions.type, course.credit_definitions, course'
      end
      # resource path
      local_var_path = '/courses/{course_id}/planned_courses/{id}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'course_id' + '}', course_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = @api_client.build_collection_param(opts[:'include'], :csv) if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer', 'Educator']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PlannedCourse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlannedCoursesApi#get_courses_course_id_planned_courses_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all planned course records
    # 
    # @param course_id Filter results on course_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include Include relations
    # @option opts [String] :search Filter results on search
    # @option opts [String] :closed_for_account_id Filter results on closed_for_account_id
    # @option opts [String] :min_cost Filter results on min_cost
    # @option opts [String] :max_cost Filter results on max_cost
    # @option opts [String] :type Filter results on type
    # @option opts [String] :publicly_available Filter results on publicly_available
    # @option opts [String] :parents_published Filter results on parents_published
    # @option opts [String] :published_public Filter results on published_public
    # @option opts [String] :visible_for_user_id Filter results on visible_for_user_id
    # @option opts [String] :start_date Filter results on start_date
    # @option opts [String] :start_date_in_month Filter results on start_date_in_month
    # @option opts [String] :start_date_from Filter results on start_date_from
    # @option opts [String] :start_date_until Filter results on start_date_until
    # @option opts [String] :availability_state Filter results on availability_state
    # @option opts [Array<String>] :id Filter results on id
    # @option opts [Array<String>] :not_id Filter results on not_id
    # @option opts [Array<String>] :status Filter results on status
    # @option opts [Array<String>] :course_label_ids Filter results on course_label_ids
    # @option opts [Array<String>] :course_variant_id Filter results on course_variant_id
    # @option opts [Array<String>] :course_location_id Filter results on course_location_id
    # @option opts [Array<String>] :course_category_id Filter results on course_category_id
    # @option opts [Array<String>] :course_credit_category_id Filter results on course_credit_category_id
    # @option opts [Array<String>] :teacher_ids Filter results on teacher_ids
    # @option opts [Array<String>] :enrollments_status Filter results on enrollments_status
    # @option opts [Array<String>] :attendee_ids Filter results on attendee_ids
    # @option opts [Array<String>] :sort Sort the results. Can change order by using &#x60;&lt;sort_by&gt;:&lt;direction&gt;&#x60; where &#x60;&lt;direction&gt;&#x60; is either &#x60;asc&#x60; or &#x60;desc&#x60;
    # @return [Array<PlannedCourse>]
    def get_planned_courses(course_id, opts = {})
      data, _status_code, _headers = get_planned_courses_with_http_info(course_id, opts)
      data
    end

    # Get all planned course records
    # 
    # @param course_id Filter results on course_id
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include Include relations
    # @option opts [String] :search Filter results on search
    # @option opts [String] :closed_for_account_id Filter results on closed_for_account_id
    # @option opts [String] :min_cost Filter results on min_cost
    # @option opts [String] :max_cost Filter results on max_cost
    # @option opts [String] :type Filter results on type
    # @option opts [String] :publicly_available Filter results on publicly_available
    # @option opts [String] :parents_published Filter results on parents_published
    # @option opts [String] :published_public Filter results on published_public
    # @option opts [String] :visible_for_user_id Filter results on visible_for_user_id
    # @option opts [String] :start_date Filter results on start_date
    # @option opts [String] :start_date_in_month Filter results on start_date_in_month
    # @option opts [String] :start_date_from Filter results on start_date_from
    # @option opts [String] :start_date_until Filter results on start_date_until
    # @option opts [String] :availability_state Filter results on availability_state
    # @option opts [Array<String>] :id Filter results on id
    # @option opts [Array<String>] :not_id Filter results on not_id
    # @option opts [Array<String>] :status Filter results on status
    # @option opts [Array<String>] :course_label_ids Filter results on course_label_ids
    # @option opts [Array<String>] :course_variant_id Filter results on course_variant_id
    # @option opts [Array<String>] :course_location_id Filter results on course_location_id
    # @option opts [Array<String>] :course_category_id Filter results on course_category_id
    # @option opts [Array<String>] :course_credit_category_id Filter results on course_credit_category_id
    # @option opts [Array<String>] :teacher_ids Filter results on teacher_ids
    # @option opts [Array<String>] :enrollments_status Filter results on enrollments_status
    # @option opts [Array<String>] :attendee_ids Filter results on attendee_ids
    # @option opts [Array<String>] :sort Sort the results. Can change order by using &#x60;&lt;sort_by&gt;:&lt;direction&gt;&#x60; where &#x60;&lt;direction&gt;&#x60; is either &#x60;asc&#x60; or &#x60;desc&#x60;
    # @return [Array<(Array<PlannedCourse>, Fixnum, Hash)>] Array<PlannedCourse> data, response status code and response headers
    def get_planned_courses_with_http_info(course_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlannedCoursesApi.get_planned_courses ...'
      end
      # verify the required parameter 'course_id' is set
      if @api_client.config.client_side_validation && course_id.nil?
        fail ArgumentError, "Missing the required parameter 'course_id' when calling PlannedCoursesApi.get_planned_courses"
      end
      if @api_client.config.client_side_validation && opts[:'include'] && !opts[:'include'].all? { |item| ['teachers', 'course_variant', 'catalog_variant', 'meetings.meeting_location', 'meetings', 'course_location.address', 'course_location', 'course.category', 'course.course_tab_contents.course_tab', 'course.course_tab_contents', 'course.credit_definitions.type.category', 'course.credit_definitions.type', 'course.credit_definitions', 'course'].include?(item) }
        fail ArgumentError, 'invalid value for "include", must include one of teachers, course_variant, catalog_variant, meetings.meeting_location, meetings, course_location.address, course_location, course.category, course.course_tab_contents.course_tab, course.course_tab_contents, course.credit_definitions.type.category, course.credit_definitions.type, course.credit_definitions, course'
      end
      if @api_client.config.client_side_validation && opts[:'sort'] && !opts[:'sort'].all? { |item| ['start_date', 'confirmed_active_and_completed_enrollments_count', 'requested_enrollments_count', 'courses.name', 'courses', 'course_locations.name', 'course_locations', 'course_variants.name', 'course_variants'].include?(item) }
        fail ArgumentError, 'invalid value for "sort", must include one of start_date, confirmed_active_and_completed_enrollments_count, requested_enrollments_count, courses.name, courses, course_locations.name, course_locations, course_variants.name, course_variants'
      end
      # resource path
      local_var_path = '/planned_courses'

      # query parameters
      query_params = {}
      query_params[:'course_id'] = @api_client.build_collection_param(course_id, :csv)
      query_params[:'include'] = @api_client.build_collection_param(opts[:'include'], :csv) if !opts[:'include'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'closed_for_account_id'] = opts[:'closed_for_account_id'] if !opts[:'closed_for_account_id'].nil?
      query_params[:'min_cost'] = opts[:'min_cost'] if !opts[:'min_cost'].nil?
      query_params[:'max_cost'] = opts[:'max_cost'] if !opts[:'max_cost'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'publicly_available'] = opts[:'publicly_available'] if !opts[:'publicly_available'].nil?
      query_params[:'parents_published'] = opts[:'parents_published'] if !opts[:'parents_published'].nil?
      query_params[:'published_public'] = opts[:'published_public'] if !opts[:'published_public'].nil?
      query_params[:'visible_for_user_id'] = opts[:'visible_for_user_id'] if !opts[:'visible_for_user_id'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'start_date_in_month'] = opts[:'start_date_in_month'] if !opts[:'start_date_in_month'].nil?
      query_params[:'start_date_from'] = opts[:'start_date_from'] if !opts[:'start_date_from'].nil?
      query_params[:'start_date_until'] = opts[:'start_date_until'] if !opts[:'start_date_until'].nil?
      query_params[:'availability_state'] = opts[:'availability_state'] if !opts[:'availability_state'].nil?
      query_params[:'id'] = @api_client.build_collection_param(opts[:'id'], :csv) if !opts[:'id'].nil?
      query_params[:'not_id'] = @api_client.build_collection_param(opts[:'not_id'], :csv) if !opts[:'not_id'].nil?
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :csv) if !opts[:'status'].nil?
      query_params[:'course_label_ids'] = @api_client.build_collection_param(opts[:'course_label_ids'], :csv) if !opts[:'course_label_ids'].nil?
      query_params[:'course_variant_id'] = @api_client.build_collection_param(opts[:'course_variant_id'], :csv) if !opts[:'course_variant_id'].nil?
      query_params[:'course_location_id'] = @api_client.build_collection_param(opts[:'course_location_id'], :csv) if !opts[:'course_location_id'].nil?
      query_params[:'course_category_id'] = @api_client.build_collection_param(opts[:'course_category_id'], :csv) if !opts[:'course_category_id'].nil?
      query_params[:'course_credit_category_id'] = @api_client.build_collection_param(opts[:'course_credit_category_id'], :csv) if !opts[:'course_credit_category_id'].nil?
      query_params[:'teacher_ids'] = @api_client.build_collection_param(opts[:'teacher_ids'], :csv) if !opts[:'teacher_ids'].nil?
      query_params[:'enrollments_status'] = @api_client.build_collection_param(opts[:'enrollments_status'], :csv) if !opts[:'enrollments_status'].nil?
      query_params[:'attendee_ids'] = @api_client.build_collection_param(opts[:'attendee_ids'], :csv) if !opts[:'attendee_ids'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :csv) if !opts[:'sort'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer', 'Educator']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PlannedCourse>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlannedCoursesApi#get_planned_courses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a planned course record
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include Include relations
    # @return [PlannedCourse]
    def get_planned_courses_id(id, opts = {})
      data, _status_code, _headers = get_planned_courses_id_with_http_info(id, opts)
      data
    end

    # Get a planned course record
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :include Include relations
    # @return [Array<(PlannedCourse, Fixnum, Hash)>] PlannedCourse data, response status code and response headers
    def get_planned_courses_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlannedCoursesApi.get_planned_courses_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PlannedCoursesApi.get_planned_courses_id"
      end
      if @api_client.config.client_side_validation && opts[:'include'] && !opts[:'include'].all? { |item| ['teachers', 'course_variant', 'catalog_variant', 'meetings.meeting_location', 'meetings', 'course_location.address', 'course_location', 'course.category', 'course.course_tab_contents.course_tab', 'course.course_tab_contents', 'course.credit_definitions.type.category', 'course.credit_definitions.type', 'course.credit_definitions', 'course'].include?(item) }
        fail ArgumentError, 'invalid value for "include", must include one of teachers, course_variant, catalog_variant, meetings.meeting_location, meetings, course_location.address, course_location, course.category, course.course_tab_contents.course_tab, course.course_tab_contents, course.credit_definitions.type.category, course.credit_definitions.type, course.credit_definitions, course'
      end
      # resource path
      local_var_path = '/planned_courses/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'include'] = @api_client.build_collection_param(opts[:'include'], :csv) if !opts[:'include'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer', 'Educator']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PlannedCourse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlannedCoursesApi#get_planned_courses_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a planned course.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Body] :body 
    # @return [PlannedCourse]
    def post_planned_courses(opts = {})
      data, _status_code, _headers = post_planned_courses_with_http_info(opts)
      data
    end

    # Create a planned course.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Body] :body 
    # @return [Array<(PlannedCourse, Fixnum, Hash)>] PlannedCourse data, response status code and response headers
    def post_planned_courses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlannedCoursesApi.post_planned_courses ...'
      end
      # resource path
      local_var_path = '/planned_courses'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['Bearer', 'Educator']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PlannedCourse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlannedCoursesApi#post_planned_courses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel planned courses in batch.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Body] :body 
    # @return [Array<PlannedCourse>]
    def put_planned_courses_cancel_batch(opts = {})
      data, _status_code, _headers = put_planned_courses_cancel_batch_with_http_info(opts)
      data
    end

    # Cancel planned courses in batch.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Body] :body 
    # @return [Array<(Array<PlannedCourse>, Fixnum, Hash)>] Array<PlannedCourse> data, response status code and response headers
    def put_planned_courses_cancel_batch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlannedCoursesApi.put_planned_courses_cancel_batch ...'
      end
      # resource path
      local_var_path = '/planned_courses/cancel_batch'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['Bearer', 'Educator']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PlannedCourse>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlannedCoursesApi#put_planned_courses_cancel_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a planned course.
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Body] :body 
    # @return [PlannedCourse]
    def put_planned_courses_id(id, opts = {})
      data, _status_code, _headers = put_planned_courses_id_with_http_info(id, opts)
      data
    end

    # Update a planned course.
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Body] :body 
    # @return [Array<(PlannedCourse, Fixnum, Hash)>] PlannedCourse data, response status code and response headers
    def put_planned_courses_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlannedCoursesApi.put_planned_courses_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PlannedCoursesApi.put_planned_courses_id"
      end
      # resource path
      local_var_path = '/planned_courses/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['Bearer', 'Educator']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PlannedCourse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlannedCoursesApi#put_planned_courses_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel a planned course.
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Body] :body 
    # @return [PlannedCourse]
    def put_planned_courses_id_cancel(id, opts = {})
      data, _status_code, _headers = put_planned_courses_id_cancel_with_http_info(id, opts)
      data
    end

    # Cancel a planned course.
    # 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @option opts [Body] :body 
    # @return [Array<(PlannedCourse, Fixnum, Hash)>] PlannedCourse data, response status code and response headers
    def put_planned_courses_id_cancel_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlannedCoursesApi.put_planned_courses_id_cancel ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PlannedCoursesApi.put_planned_courses_id_cancel"
      end
      # resource path
      local_var_path = '/planned_courses/{id}/cancel'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['Bearer', 'Educator']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PlannedCourse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlannedCoursesApi#put_planned_courses_id_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
